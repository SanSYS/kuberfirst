kind: Deployment
apiVersion: apps/v1
metadata:
  name: metricsdemo
  #namespace: deployment-demo
  labels:
    app: web
spec:
  replicas: 2 # сколько подов поднять (инстансов образов)

  # селектор решает, на какие шаблоны распространаяется деплой
  selector:
    matchLabels:
      app: metricsdemo

  template:
    metadata:
      labels:
        app: metricsdemo # по этой метке ищет selector
    spec:
      containers:
      - name: metricsdemo # имя деплоя
        image: localhost:5000/sansys/metricsdemo3 # образ в докере
        ports:
        - containerPort: 80 # какой порт слушает приложение внутри докера

# ВАЖНО: три дефиса делят файл, как бы на два отдельных ямла
---

kind: Service
apiVersion: v1
metadata:
  name: metricsdemo #__meta_kubernetes_service_name="metricsdemo"
  labels:
    apptype: business #__meta_kubernetes_service_label_apptype="business"
    instancetype: web #__meta_kubernetes_service_label_instancetype="web"
spec:
  selector:
    app: metricsdemo # селектор приложений по labels:app
  type: LoadBalancer # реверспрокси из вне до подов
  ports:
  - protocol: TCP # _meta_kubernetes_service_port_protocol="TCP"
    port: 9376
    targetPort: 80
    name: portapi # __meta_kubernetes_service_port_name="portapi"

# docker build -t metricsdemo3 .
# docker tag metricsdemo3 localhost:5000/sansys/metricsdemo3
# docker push localhost:5000/sansys/metricsdemo3

# kubectl create -f deployment.yaml    - создание
# kubectl delete -f deployment.yaml    - удаление

# kubectl delete deployment metricsdemo    - удаление только деплоенного (подов)
# kubectl delete service metricsdemo        - удаление только сервисов

# kubectl get deployments    - список задеплоенного
# kubectl get services        - список сервисов