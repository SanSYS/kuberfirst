# это всё отсюда https://github.com/microservices-demo/microservices-demo/tree/master/deploy/kubernetes/manifests-monitoring
# не упрощено, т.к. только http api есть
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
    component: core
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      containers:
      - image: grafana/grafana
        name: grafana
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          # - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          #   value: Admin
          # does not really work, because of template variables in exported dashboards:
          # - name: GF_DASHBOARDS_JSON_ENABLED
          #   value: "true"
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
          # initialDelaySeconds: 30
          # timeoutSeconds: 1
        volumeMounts:
        - name: grafana-provisioning-datasources
          mountPath: /etc/grafana/provisioning/datasources/
        - name: grafana-provisioning-dashboards
          mountPath: /etc/grafana/provisioning/dashboards/
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards/
      volumes:
        - name: grafana-provisioning-datasources
          configMap:
            defaultMode: 420
            name: grafana-provisioning-datasources
        - name: grafana-provisioning-dashboards
          configMap:
            defaultMode: 420
            name: grafana-provisioning-dashboards
        - name: grafana-dashboards
          configMap:
            defaultMode: 420
            name: grafana-dashboards
      nodeSelector:
        beta.kubernetes.io/os: linux

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
    component: core
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  selector:
    app: grafana
    component: core

---

#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: grafana-import-dashboards
#  namespace: default
#  labels:
#    app: grafana
#    component: import-dashboards
#spec:
#  template:
#    metadata:
#      name: grafana-import-dashboards
#      labels:
#        app: grafana
#        component: import-dashboards
#      annotations:
#        pod.beta.kubernetes.io/init-containers: '[
#          {
#            "name": "wait-for-endpoints",
#            "image": "giantswarm/tiny-tools",
#            "imagePullPolicy": "IfNotPresent",
#            "command": ["fish", "-c", "echo \"waiting for endpoints...\"; while true; set endpoints (curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt --header \"Authorization: Bearer \"(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://kubernetes.default.svc/api/v1/namespaces/default/endpoints/grafana); echo $endpoints | jq \".\"; if test (echo $endpoints | jq -r \".subsets[].addresses | length\") -gt 0; exit 0; end; echo \"waiting...\";sleep 1; end"],
#            "args": ["monitoring", "grafana"]
#          }
#        ]'
#    spec:
#      containers:
#      - name: grafana-import-dashboards
#        image: giantswarm/tiny-tools
#        command: ["/bin/sh", "-c"]
#        workingDir: /opt/grafana-import-dashboards
#        args:
#          - >
#            for file in *-datasource.json ; do
#              if [ -e "$file" ] ; then
#                echo "importing $file" &&
#                curl --silent --fail --show-error \
#                  --request POST http://admin:admin@grafana:3000/api/datasources \
#                  --header "Content-Type: application/json" \
#                  --header "Accept: application/json" \
#                  --data-binary "@$file" ;
#                echo "" ;
#              fi
#            done ;
#            for file in *-dashboard.json ; do
#              if [ -e "$file" ] ; then
#                echo "importing $file" &&
#                curl --silent --fail --show-error \
#                  --request POST http://admin:admin@grafana:3000/api/dashboards/import \
#                  --header "Content-Type: application/json" \
#                  --header "Accept: application/json" \
#                  --data-binary "@$file" ;
#                echo "" ;
#              fi
#            done ;
#        volumeMounts:
#        - name: config-volume
#          mountPath: /opt/grafana-import-dashboards
#      restartPolicy: Never
#      volumes:
#      - name: config-volume
#        configMap:
#          name: grafana-import-dashboards
